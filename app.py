# ==========================================
# üì¶ Standard library imports
# ==========================================
import os
import sys
import re
import json
import time
import uuid
import base64
import random
import tempfile
import subprocess
import platform
import threading
import winreg
from pathlib import Path
from datetime import datetime, timezone
from time import sleep
from tkinter import Tk, filedialog

# ==========================================
# üß© Third-party libraries
# ==========================================
import eel
import requests
import supabase
try:
    import brotli  # try native first
except Exception:
    import brotlicffi as brotli
    import sys
    sys.modules['brotli'] = brotli
from seleniumwire import webdriver  # pip install selenium-wire
from selenium.webdriver.firefox.service import Service
from selenium.webdriver.firefox.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# ==========================================
# üß† Internal project imports
# ==========================================
from web.src_py.reg_ig import FirefoxManager
from web.src_py.key import Check_key


# === FIX: L·∫•y ƒë∆∞·ªùng d·∫´n th·ª±c khi ch·∫°y EXE ===
def get_base_path():
    """Tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n g·ªëc (kh√°c nhau gi·ªØa dev v√† EXE)"""
    if getattr(sys, 'frozen', False):
        # ƒêang ch·∫°y t·ª´ EXE (PyInstaller)
        return sys._MEIPASS
    else:
        # ƒêang ch·∫°y t·ª´ Python script
        return os.path.dirname(os.path.abspath(__file__))

# === FIX: ƒê·∫£m b·∫£o geckodriver ƒë∆∞·ª£c copy v√†o EXE ===
def get_geckodriver_path():
    """T√¨m geckodriver trong EXE ho·∫∑c th∆∞ m·ª•c hi·ªán t·∫°i"""
    base_path = get_base_path()
    
    # C√°c v·ªã tr√≠ c√≥ th·ªÉ c√≥ geckodriver
    possible_paths = [
        os.path.join(base_path, "geckodriver.exe"),
        os.path.join(os.getcwd(), "geckodriver.exe"),
        os.path.join(base_path, "drivers", "geckodriver.exe"),
        "geckodriver.exe"  # Trong PATH
    ]
    
    for path in possible_paths:
        if os.path.exists(path):
            print(f"‚úì T√¨m th·∫•y geckodriver t·∫°i: {path}")
            return path
    
    print("‚ùå KH√îNG T√åM TH·∫§Y GECKODRIVER!")
    return None

# Kh·ªüi t·∫°o Eel
eel.init('web')

# Bi·∫øn to√†n c·ª•c
is_running = False
registration_thread = None

@eel.expose
def start_registration(config):
    global is_running, registration_thread
    
    if is_running:
        return {'success': False, 'message': 'ƒê√£ c√≥ ti·∫øn tr√¨nh ƒëang ch·∫°y!'}
    
    # === KI·ªÇM TRA FIREFOX ===
    if not config.get('firefoxPath') or not os.path.exists(config['firefoxPath']):
        return {
            'success': False, 
            'message': '‚ùå Kh√¥ng t√¨m th·∫•y Firefox! Vui l√≤ng ch·ªçn ƒë∆∞·ªùng d·∫´n Firefox.'
        }
    
    # === KI·ªÇM TRA GECKODRIVER ===
    geckodriver = config.get('geckodriverPath') or get_geckodriver_path()
    
    if not geckodriver or not os.path.exists(geckodriver):
        return {
            'success': False,
            'message': '‚ùå Kh√¥ng t√¨m th·∫•y geckodriver.exe! Vui l√≤ng ƒë·∫∑t file v√†o c√πng th∆∞ m·ª•c v·ªõi EXE.'
        }
    
    config['geckodriverPath'] = geckodriver
    
    is_running = True
    
    try:
        manager = FirefoxManager(config)
        registration_thread = threading.Thread(target=manager.thread_reg, daemon=True)
        registration_thread.start()
        return {'success': True}
    except Exception as e:
        is_running = False
        return {'success': False, 'message': f'L·ªói kh·ªüi t·∫°o: {str(e)}'}


@eel.expose
def stop_registration():
    global is_running
    is_running = False
    print("\nƒê√£ nh·∫≠n l·ªánh d·ª´ng qu√° tr√¨nh t·∫°o t√†i kho·∫£n!")
    return {'success': True}


@eel.expose
def save_config(config):
    try:
        config_path = Path('data/config.json')
        config_path.parent.mkdir(exist_ok=True)  # T·∫°o th∆∞ m·ª•c data n·∫øu ch∆∞a c√≥
        
        with open(config_path, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=4, ensure_ascii=False)
        
        print(f"ƒê√£ l∆∞u c·∫•u h√¨nh v√†o {config_path}")
        return {'success': True}
    except Exception as e:
        print(f"L·ªói khi l∆∞u c·∫•u h√¨nh: {e}")
        return {'success': False, 'message': str(e)}


@eel.expose
def test_firefox(firefox_path):
    """Test Firefox - C·∫£i ti·∫øn"""
    try:
        if not firefox_path:
            return {'success': False, 'message': 'Ch∆∞a ch·ªçn ƒë∆∞·ªùng d·∫´n Firefox!'}
        
        if not os.path.exists(firefox_path):
            return {
                'success': False,
                'message': f'File kh√¥ng t·ªìn t·∫°i: {firefox_path}'
            }
        
        # Ki·ªÉm tra c√≥ ph·∫£i file .exe kh√¥ng
        if not firefox_path.lower().endswith('.exe'):
            return {
                'success': False,
                'message': 'File ph·∫£i c√≥ ƒëu√¥i .exe'
            }
        
        # Test kh·ªüi ƒë·ªông Firefox (ch·ªâ test nhanh, kh√¥ng m·ªü browser)
        from selenium.webdriver.firefox.options import Options
        from selenium.webdriver.firefox.service import Service
        
        options = Options()
        options.binary_location = firefox_path
        options.add_argument('--headless')  # Ch·∫°y ·∫©n
        
        geckodriver = get_geckodriver_path()
        if not geckodriver:
            return {
                'success': False,
                'message': 'Kh√¥ng t√¨m th·∫•y geckodriver.exe! ƒê·∫∑t file v√†o c√πng th∆∞ m·ª•c v·ªõi EXE.'
            }
        
        service = Service(geckodriver)
        
        # Test kh·ªüi t·∫°o
        from seleniumwire import webdriver
        driver = webdriver.Firefox(service=service, options=options)
        driver.quit()
        
        print(f"‚úì Test Firefox th√†nh c√¥ng: {firefox_path}")
        return {'success': True, 'message': 'Firefox ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng!'}
        
    except Exception as e:
        print(f"‚ùå Test Firefox th·∫•t b·∫°i: {e}")
        return {'success': False, 'message': f'L·ªói: {str(e)}'}


@eel.expose
def select_firefox_path():
    """T√¨m Firefox - C·∫¢I TI·∫æN ƒê·ªÇ HO·∫†T ƒê·ªòNG TRONG EXE"""
    try:
        print("üîç ƒêang t√¨m Firefox...")
        
        # 1. C√°c ƒë∆∞·ªùng d·∫´n m·∫∑c ƒë·ªãnh
        default_paths = [
            r"C:\Program Files\Mozilla Firefox\firefox.exe",
            r"C:\Program Files (x86)\Mozilla Firefox\firefox.exe",
            os.path.expanduser(r"~\AppData\Local\Mozilla Firefox\firefox.exe"),
        ]
        
        for path in default_paths:
            if os.path.exists(path):
                print(f"‚úì T√¨m th·∫•y Firefox t·∫°i: {path}")
                return path
        
        # 2. T√¨m trong Registry (Windows)
        try:
            import winreg
            key = winreg.OpenKey(
                winreg.HKEY_LOCAL_MACHINE,
                r"SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\firefox.exe"
            )
            path = winreg.QueryValue(key, None)
            if os.path.exists(path):
                print(f"‚úì T√¨m th·∫•y Firefox t·ª´ Registry: {path}")
                return path
        except:
            pass
        
        # 3. Cho ng∆∞·ªùi d√πng ch·ªçn th·ªß c√¥ng
        print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y Firefox t·ª± ƒë·ªông. M·ªü h·ªôp tho·∫°i ch·ªçn file...")
        
        root = Tk()
        root.withdraw()
        root.attributes('-topmost', True)
        root.update()  # ‚Üê QUAN TR·ªåNG: Force update ƒë·ªÉ dialog xu·∫•t hi·ªán
        
        file_path = filedialog.askopenfilename(
            title="Ch·ªçn file firefox.exe",
            filetypes=[
                ("Firefox", "firefox.exe"),
                ("Executable files", "*.exe"),
                ("All files", "*.*")
            ],
            initialdir="C:\\Program Files"
        )
        
        root.destroy()
        
        if file_path:
            print(f"‚úì ƒê√£ ch·ªçn Firefox: {file_path}")
            return file_path
        else:
            print("‚ö† Ng∆∞·ªùi d√πng h·ªßy ch·ªçn file")
            return ""
            
    except Exception as e:
        print(f"‚ùå L·ªói khi ch·ªçn Firefox: {e}")
        return ""


@eel.expose
def select_geckodriver_path():
    """Ch·ªçn geckodriver - C·∫£i ti·∫øn"""
    try:
        # Th·ª≠ t√¨m t·ª± ƒë·ªông tr∆∞·ªõc
        auto_path = get_geckodriver_path()
        if auto_path:
            return auto_path
        
        # M·ªü h·ªôp tho·∫°i
        print("M·ªü h·ªôp tho·∫°i ch·ªçn geckodriver.exe...")
        root = Tk()
        root.withdraw()
        root.attributes('-topmost', True)
        root.update()
        
        file_path = filedialog.askopenfilename(
            title="Ch·ªçn file geckodriver.exe",
            filetypes=[
                ("Geckodriver", "geckodriver.exe"),
                ("Executable files", "*.exe"),
                ("All files", "*.*")
            ],
            initialdir=os.getcwd()
        )
        
        root.destroy()
        
        if file_path:
            print(f"‚úì ƒê√£ ch·ªçn geckodriver: {file_path}")
            return file_path
        else:
            print("‚ö† Ng∆∞·ªùi d√πng h·ªßy ch·ªçn file")
            return ""
            
    except Exception as e:
        print(f"‚ùå L·ªói khi ch·ªçn geckodriver: {e}")
        return ""


@eel.expose
def import_proxy_file():
    """Import file proxy"""
    try:
        root = Tk()
        root.withdraw()
        root.attributes('-topmost', True)
        root.update()
        
        file_path = filedialog.askopenfilename(
            title="Ch·ªçn file proxy",
            filetypes=[
                ("Text files", "*.txt"),
                ("All files", "*.*")
            ]
        )
        
        root.destroy()
        
        if file_path:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            print(f"‚úì ƒê√£ import proxy t·ª´: {file_path}")
            return content
        else:
            print("‚ö† Ng∆∞·ªùi d√πng h·ªßy ch·ªçn file")
            return ""
            
    except Exception as e:
        print(f"‚ùå L·ªói khi import proxy: {e}")
        return ""


@eel.expose
def export_accounts(accounts):
    """Export t√†i kho·∫£n"""
    try:
        output_dir = Path('output')
        output_dir.mkdir(exist_ok=True)
        
        timestamp = time.strftime("%Y%m%d_%H%M%S")
        
        # Export TXT
        txt_file = output_dir / f'accounts_{timestamp}.txt'
        with open(txt_file, 'w', encoding='utf-8') as f:
            for acc in accounts:
                line = f"{acc['username']}|{acc['password']}|{acc['email']}|{acc['cookie']}\n"
                f.write(line)
        
        # Export JSON
        json_file = output_dir / f'accounts_{timestamp}.json'
        with open(json_file, 'w', encoding='utf-8') as f:
            json.dump(accounts, f, indent=4, ensure_ascii=False)
        
        print(f"‚úì ƒê√£ export {len(accounts)} t√†i kho·∫£n:")
        print(f"  - TXT: {txt_file}")
        print(f"  - JSON: {json_file}")
        
        return {'success': True}
    except Exception as e:
        print(f"L·ªói khi export: {e}")
        return {'success': False, 'message': str(e)}


@eel.expose
def main_check_key(key):
    try:
        with open(r'data/version_client.json', 'r', encoding="utf-8-sig") as f:
            version = json.load(f)
        
        statuscheckkey = Check_key().check_update(key, version['version_client'])
        
        if statuscheckkey['data']:
            with open('data/key.json', "w", encoding="utf-8") as f:
                json.dump({'key': key}, f, ensure_ascii=False, indent=4)
            eel.start('index.html', size=(1200, 800))
        
        return statuscheckkey
    except Exception as e:
        print(f"L·ªói check key: {e}")
        return {'data': False, 'message': str(e)}

ACCOUNTS_FILE = Path('data/accounts.json')

@eel.expose
def save_accounts(accounts):
    """L∆∞u danh s√°ch t√†i kho·∫£n v√†o file JSON"""
    try:
        # T·∫°o th∆∞ m·ª•c data n·∫øu ch∆∞a c√≥
        ACCOUNTS_FILE.parent.mkdir(exist_ok=True)
        
        # L∆∞u v√†o file
        with open(ACCOUNTS_FILE, 'w', encoding='utf-8') as f:
            json.dump(accounts, f, indent=4, ensure_ascii=False)
        
        print(f"üíæ ƒê√£ l∆∞u {len(accounts)} t√†i kho·∫£n v√†o {ACCOUNTS_FILE}")
        return {'success': True, 'count': len(accounts)}
    
    except Exception as e:
        print(f"‚ùå L·ªói khi l∆∞u accounts: {e}")
        return {'success': False, 'message': str(e)}


@eel.expose
def load_accounts():
    """Load danh s√°ch t√†i kho·∫£n t·ª´ file JSON"""
    try:
        if not ACCOUNTS_FILE.exists():
            print("üìÇ File accounts.json ch∆∞a t·ªìn t·∫°i, tr·∫£ v·ªÅ danh s√°ch r·ªóng")
            return []
        
        with open(ACCOUNTS_FILE, 'r', encoding='utf-8') as f:
            accounts = json.load(f)
        
        print(f"üìÇ ƒê√£ load {len(accounts)} t√†i kho·∫£n t·ª´ {ACCOUNTS_FILE}")
        return accounts
    
    except Exception as e:
        print(f"‚ùå L·ªói khi load accounts: {e}")
        return []


# ============== C√ÅC H√ÄM X·ª¨ L√ù (CH·ªà PRINT) ==============
import json
from pathlib import Path

XPATH_FILE = Path('data/xpath_settings.json')

@eel.expose
def get_xpath_settings():
    """L·∫•y c√†i ƒë·∫∑t XPath t·ª´ file"""
    try:
        if XPATH_FILE.exists():
            with open(XPATH_FILE, 'r', encoding='utf-8') as f:
                xpath_settings = json.load(f)
            print(f"üìÇ ƒê√£ load XPath settings: {xpath_settings}")
            return xpath_settings
        else:
            # Tr·∫£ v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh
            default_xpaths = {
                'username': '//input[@name="username"]',
                'password': '//input[@name="password"]'
            }
            print("‚ö†Ô∏è Ch∆∞a c√≥ file xpath_settings.json, tr·∫£ v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh")
            return default_xpaths
    except Exception as e:
        print(f"‚ùå L·ªói khi load XPath settings: {e}")
        return {
            'username': '//input[@name="username"]',
            'password': '//input[@name="password"]'
        }


@eel.expose
def save_xpath_settings(xpath_settings):
    """L∆∞u c√†i ƒë·∫∑t XPath v√†o file"""
    try:
        # T·∫°o th∆∞ m·ª•c data n·∫øu ch∆∞a c√≥
        XPATH_FILE.parent.mkdir(exist_ok=True)
        
        # L∆∞u v√†o file
        with open(XPATH_FILE, 'w', encoding='utf-8') as f:
            json.dump(xpath_settings, f, indent=4, ensure_ascii=False)
        
        print(f"üíæ ƒê√£ l∆∞u XPath settings: {xpath_settings}")
        return {'success': True, 'message': 'ƒê√£ l∆∞u XPath settings!'}
    
    except Exception as e:
        print(f"‚ùå L·ªói khi l∆∞u XPath settings: {e}")
        return {'success': False, 'message': str(e)}


@eel.expose
def start_login(accounts, threads, delay, xpath_settings):
    """B·∫Øt ƒë·∫ßu qu√° tr√¨nh login"""
    data = {
        'accounts': accounts,
        'threads': threads,
        'delay': delay,
        'xpath_settings': xpath_settings
    }
    print(data)
    return {'success': True, 'message': 'Login started'}


@eel.expose
def start_check_live(accounts, threads, delay):
    """B·∫Øt ƒë·∫ßu qu√° tr√¨nh check live"""
    print(f"\n‚úÖ START CHECK LIVE: {len(accounts)} t√†i kho·∫£n | Threads: {threads} | Delay: {delay}s")
    return {'success': True, 'message': 'Check live started'}


@eel.expose
def start_check_block(accounts, threads, delay):
    """B·∫Øt ƒë·∫ßu qu√° tr√¨nh check block"""
    print(f"\nüö´ START CHECK BLOCK: {len(accounts)} t√†i kho·∫£n | Threads: {threads} | Delay: {delay}s")
    return {'success': True, 'message': 'Check block started'}


@eel.expose
def start_nuoi(accounts, config):
    """B·∫Øt ƒë·∫ßu qu√° tr√¨nh nu√¥i t√†i kho·∫£n"""
    print(f"\nüå± START NU√îI: {len(accounts)} t√†i kho·∫£n | Config: {config}")
    return {'success': True, 'message': 'Nuoi started'}
# === CH·∫†Y ·ª®NG D·ª§NG ===
if __name__ == '__main__':
    try:
        # T·∫°o th∆∞ m·ª•c data n·∫øu ch∆∞a c√≥
        Path('data').mkdir(exist_ok=True)
        
        # Ki·ªÉm tra key
        try:
            with open(r'data/key.json', "r", encoding="utf-8") as f:
                key_data = json.load(f)
            
            with open(r'data/version_client.json', 'r', encoding="utf-8-sig") as versiondata:
                version = json.load(versiondata)
            
            status_checkkey = Check_key().check_update(key_data['key'], version)
            
            if status_checkkey['data'] == True:
                eel.start('index.html', size=(1200, 800), port=6060)
            else:
                os.remove('data/key.json')
                eel.start('key.html', size=(400, 600), port=6060)
        
        except FileNotFoundError:
            print("‚ö†Ô∏è Ch∆∞a c√≥ file key.json, m·ªü m√†n h√¨nh nh·∫≠p key")
            eel.start('key.html', size=(400, 600), port=6060)
        
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            eel.start('key.html', size=(400, 600), port=6060)
    
    except Exception as e:
        print(f"‚ùå L·ªói nghi√™m tr·ªçng: {e}")
        input("Nh·∫•n Enter ƒë·ªÉ tho√°t...")
